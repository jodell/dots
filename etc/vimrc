""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pathogen needs to be setup first
"
filetype off
call pathogen#helptags()
call pathogen#runtime_append_all_bundles()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Basic Setup

" Colors
syntax on
colors inkpot
"set term=xterm-color
set t_Co=256
set bg=dark

"call pathogen#runtime_append_all_bundles()

filetype plugin indent on " Enable filetype-specific indenting and plugins
set backspace=indent,eol,start
set nocompatible
set sw=2 sts=2 et ai
set whichwrap=b,s,h,l
set wildmenu
set wildmode=list:longest
set list listchars=tab:\ \ ,trail:·
set nostartofline " restart at last cursor position - YAY!
set scrolloff=10  " keep 10 lines above and below position
set showcmd
set showmatch
set ruler

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

set cpoptions+=n
set showbreak=↳\\

" File name, git branch, and line & col position
set laststatus=2
set statusline=%F\ <%{GitBranch()}>\ %l,%v

" Strip trailing whitespace upon write
autocmd BufWritePre *.{m,h,erb,haml,rb,js,coffee,scss,css,yml} call StripTrailingWhiteSpace()

function! StripTrailingWhiteSpace()
  let l:winview = winsaveview()
  silent! %s/\s\+$//
  call winrestview(l:winview)
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key Mappings
"
let mapleader = ","

" Opens a tab edit command with the path of the currently edited file filled in
noremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

noremap <Leader>r :!ruby %<CR>
noremap <Leader>w :w!<CR>
noremap <Leader>x :x!<CR>
noremap <Leader>ev :tabnew $MYVIMRC<CR>
noremap <Leader>q :qa<CR>
noremap <Leader>ra :!rake %<CR>
noremap <Leader>, :!!<CR>
noremap <Leader>c <C-w>c<CR>
"noremap <Leader>a :<Leader>A<CR>
noremap <leader>s :set list!<CR>
noremap <leader>m :!markdown < %:p > /tmp/`basename %`.html; open file:///tmp/`basename %`.html<CR>
noremap <leader>g :FuzzyFinderFile<CR>
map <F5> :%s/<\([^>]\)*>/\r&\r/g<enter>:g/^$/d<enter>vat=
map <F8> vatJxvito<right><left>x
map <F7> /\v^\s*([a-zA-Z\-0-9\$])<enter>qm<F6>nq@q1000@@:1<enter>

" Strip trailing whitespace in the current buffer
nnoremap <leader>p :call StripTrailingWhiteSpace()<CR>

"noremap ,c :!cucumber --format pretty %<CR>
" Run the cucumber scenario under the cursor <3
noremap <Leader>f :execute "!bundle exec cucumber --format pretty %:".line('.')<CR>

" NERd Tree
noremap <Leader>t :execute 'NERDTreeToggle'<CR> 
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p

" Tags
set tags=tags;$HOME

" Dict - scrumtrilescent!
noremap <Leader>d :execute "!dict <cword>"<CR>

" Source this file
noremap <Leader>v :source ~/.vimrc<CR>

" Map ctrl-j to escape for more home row action!
:imap <C-j> <Esc>

" Tab Navigation
map  <C-l> :tabn<CR>
map  <C-h> :tabp<CR>
map  <C-n> :tabnew<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Filetypes - Move Me
" Load matchit (% to bounce from do to end, etc.)
runtime! macros/matchit.vim

augroup myfiletypes
  " Clear old autocmds in group
  autocmd!
  " autoindent with two spaces, always expand tabs
  autocmd FileType rspec,ruby,eruby,yaml,rake set ai sw=2 sts=2 et
augroup END

" ruby
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

" Clojure
let vimclojure#HighlightBuiltins = 1
let vimclojure#ParenRainbow = 1

" Obj-C
autocmd BufRead,BufNewFile *.pch set filetype=objc
"autocmd BufNewFile,BufReadPost *.zucchini set filetype=cucumber
"autocmd BufRead,BufNewFile *.pch set ft=objc
"autocmd BufEnter * if &filetype == "" | setlocal ft=txt | endif

" change to the working directory of open buffer unless in /tmp
"autocmd BufEnter * if expand("%:p:h") !~ '^/tmp' | lcd %:p:h | endif

"improve autocomplete menu color
highlight Pmenu ctermbg=238 gui=bold
augroup mkd
  autocmd BufRead *.mkd,*.md  set ai formatoptions=tcroqn2 comments=n:&gt;
augroup END

" TagBar
nmap <F8> :TagbarToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" History
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/tmp

if $VIM_CRONTAB == "true"
  set nobackup
  set nowritebackup
endif

" Marks
set viminfo='100,f1

" Shell like you mean it
set shell=bash\ --login

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Folding
set foldenable
set foldmethod=syntax
set foldlevel=100
au BufWinLeave * silent! mkview " Automatically load/save folding views
au BufWinEnter * silent! loadview

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc 
"
" Highlight > 80 cols
" http://stackoverflow.com/questions/235439/vim-80-column-layout-concerns
"if has("colorcolumn")
"  set colorcolumn=80
"else
"  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
"endif

" gist-vim
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:github_token = $GITHUB_TOKEN

let g:SuperTabDefaultCompletionType = "context"

" ctrl-p
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" Include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

if has("gui")
  set go=-T " Remove toolbar
  set go+=c
  set gfn=Monaco:h12
  set visualbell

  if &background == "dark"
    hi normal guibg=black
  endif

  colors koehler

  set mousehide " Hide the mouse when typing text

  " Include user's local vim config
  if filereadable(expand("~/.gvimrc.local"))
    source ~/.gvimrc.local
  endif
endif

" Match trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/

if v:version > 702
  autocmd BufWinLeave * call clearmatches()
endif

" zucchini
autocmd BufNewFile,BufReadPost *.zucchini set filetype=cucumber

highlight clear SignColumn

" Set paste automatically
:imap <D-V> ^O"+p

set pastetoggle=

" syntastic
let g:syntastic_check_on_open=1
let g:syntastic_enable_signs=1

function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()
